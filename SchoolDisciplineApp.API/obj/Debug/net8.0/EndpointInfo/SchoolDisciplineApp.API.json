{
  "openapi": "3.0.1",
  "info": {
    "title": "School Discipline API",
    "description": "API documentation for School Discipline system",
    "version": "v1"
  },
  "paths": {
    "/api/Attendance": {
      "get": {
        "tags": [
          "Attendance"
        ],
        "summary": "Retrieves all attendance records, optionally filtered by class and month.",
        "parameters": [
          {
            "name": "classId",
            "in": "query",
            "description": "Optional: Filter by class ID.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "month",
            "in": "query",
            "description": "Optional: Filter by month (1-12).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Attendance"
        ],
        "summary": "Adds a new attendance record.",
        "requestBody": {
          "description": "The attendance record DTO object to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttendanceRecordDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AttendanceRecordDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AttendanceRecordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Attendance record added successfully."
          },
          "400": {
            "description": "If the input data is invalid."
          }
        }
      }
    },
    "/api/Attendance/{id}": {
      "get": {
        "tags": [
          "Attendance"
        ],
        "summary": "Retrieves a specific attendance record by its unique ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of the attendance record.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the attendance record successfully."
          },
          "404": {
            "description": "If no attendance record is found with the given ID."
          }
        }
      },
      "put": {
        "tags": [
          "Attendance"
        ],
        "summary": "Updates an existing attendance record.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of the record to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The updated attendance record DTO data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttendanceRecordDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AttendanceRecordDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AttendanceRecordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Attendance record updated successfully."
          },
          "400": {
            "description": "If the input data is invalid."
          },
          "404": {
            "description": "If no record is found with the given ID."
          }
        }
      },
      "delete": {
        "tags": [
          "Attendance"
        ],
        "summary": "Deletes an attendance record by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of the record to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attendance record deleted successfully."
          },
          "404": {
            "description": "If no record is found with the given ID."
          }
        }
      }
    },
    "/api/Attendance/student/{studentId}": {
      "get": {
        "tags": [
          "Attendance"
        ],
        "summary": "Retrieves all attendance records for a specific student.",
        "parameters": [
          {
            "name": "studentId",
            "in": "path",
            "description": "The unique ID of the student.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of attendance records successfully."
          },
          "404": {
            "description": "If no records found for the student."
          }
        }
      }
    },
    "/api/Attendance/class-attendance-by-date": {
      "get": {
        "tags": [
          "Attendance"
        ],
        "summary": "Retrieves all students in a class and their attendance status on a specified date.\r\nReturns students even if there is no attendance record for them on that date (assumed present).",
        "parameters": [
          {
            "name": "classId",
            "in": "query",
            "description": "The ID of the class to filter students.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date to filter attendance records.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of students with attendance status."
          },
          "404": {
            "description": "If no students found for the specified class."
          }
        }
      }
    },
    "/api/Attendance/update-multiple": {
      "put": {
        "tags": [
          "Attendance"
        ],
        "summary": "Updates multiple attendance records at once.",
        "requestBody": {
          "description": "A list of attendance record DTOs to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AttendanceRecordDto"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AttendanceRecordDto"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AttendanceRecordDto"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "All valid attendance records updated successfully."
          },
          "400": {
            "description": "If the input data is invalid or empty."
          },
          "404": {
            "description": "If none of the provided records were found in the database."
          }
        }
      }
    },
    "/api/Behavior": {
      "get": {
        "tags": [
          "Behavior"
        ],
        "summary": "Retrieves all behavior records.",
        "parameters": [
          {
            "name": "classId",
            "in": "query",
            "description": "Optional: Filter by class ID.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "studentId",
            "in": "query",
            "description": "Optional: Filter by student ID.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Behavior"
        ],
        "summary": "Adds a new behavior record.",
        "requestBody": {
          "description": "The behavior record DTO object to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BehaviorRecordDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BehaviorRecordDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BehaviorRecordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Behavior record added successfully."
          },
          "400": {
            "description": "If the input data is invalid."
          }
        }
      }
    },
    "/api/Behavior/{id}": {
      "get": {
        "tags": [
          "Behavior"
        ],
        "summary": "Retrieves a specific behavior record by its unique ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of the behavior record.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the behavior record successfully."
          },
          "404": {
            "description": "If no record found with the given ID."
          }
        }
      },
      "put": {
        "tags": [
          "Behavior"
        ],
        "summary": "Updates an existing behavior record.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of the record to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The updated behavior record DTO data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BehaviorRecordDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BehaviorRecordDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BehaviorRecordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Behavior record updated successfully."
          },
          "400": {
            "description": "If the input data is invalid."
          },
          "404": {
            "description": "If no record is found with the given ID."
          }
        }
      },
      "delete": {
        "tags": [
          "Behavior"
        ],
        "summary": "Deletes a behavior record by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of the record to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Behavior record deleted successfully."
          },
          "404": {
            "description": "If no record is found with the given ID."
          }
        }
      }
    },
    "/api/Behavior/student/{studentId}": {
      "get": {
        "tags": [
          "Behavior"
        ],
        "summary": "Retrieves all behavior records for a specific student.",
        "parameters": [
          {
            "name": "studentId",
            "in": "path",
            "description": "The unique ID of the student.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns records successfully."
          },
          "404": {
            "description": "If no records found for the student."
          }
        }
      }
    },
    "/api/Class": {
      "get": {
        "tags": [
          "Class"
        ],
        "summary": "Retrieves all school classes.",
        "responses": {
          "200": {
            "description": "Returns all classes successfully."
          }
        }
      },
      "post": {
        "tags": [
          "Class"
        ],
        "summary": "Adds a new school class.",
        "requestBody": {
          "description": "The DTO object for the class to be added.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchoolClassDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SchoolClassDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SchoolClassDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Class added successfully."
          },
          "400": {
            "description": "If the input data is invalid."
          }
        }
      }
    },
    "/api/Class/{id}": {
      "get": {
        "tags": [
          "Class"
        ],
        "summary": "Retrieves a specific class by its unique ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of the class.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the class details successfully."
          },
          "404": {
            "description": "If no class is found with the given ID."
          }
        }
      },
      "put": {
        "tags": [
          "Class"
        ],
        "summary": "Updates an existing class information.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of the class to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The updated class DTO data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchoolClassDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SchoolClassDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SchoolClassDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Class updated successfully."
          },
          "400": {
            "description": "If the input data is invalid."
          },
          "404": {
            "description": "If no class is found with the given ID."
          }
        }
      },
      "delete": {
        "tags": [
          "Class"
        ],
        "summary": "Deletes a specific class by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of the class to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Class deleted successfully."
          },
          "404": {
            "description": "If no class is found with the given ID."
          }
        }
      }
    },
    "/api/Reports": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Retrieves all reports in the system.",
        "responses": {
          "200": {
            "description": "Returns the list of reports.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "If no reports exist.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "If a server error occurs."
          }
        }
      },
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Adds a new report to the system.",
        "requestBody": {
          "description": "The report DTO object to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReportDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Report successfully created.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDto"
                }
              }
            }
          },
          "400": {
            "description": "If the report data is invalid.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "If a server error occurs."
          }
        }
      }
    },
    "/api/Reports/{id}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Retrieves a specific report by its unique ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of the report.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested report.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDto"
                }
              }
            }
          },
          "404": {
            "description": "If the report with the given ID does not exist.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "If a server error occurs."
          }
        }
      }
    },
    "/api/Reports/export": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Exports all reports in JSON format.",
        "responses": {
          "200": {
            "description": "Returns the exported reports.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "If a server error occurs."
          }
        }
      }
    },
    "/": {
      "get": {
        "tags": [
          "SchoolDisciplineApp.API"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Student": {
      "get": {
        "tags": [
          "Student"
        ],
        "summary": "Retrieves all students from the system or filters by class if classId is provided.",
        "parameters": [
          {
            "name": "classId",
            "in": "query",
            "description": "Optional. The ID of the class to filter students.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of students successfully."
          }
        }
      },
      "post": {
        "tags": [
          "Student"
        ],
        "summary": "Adds a new student or a list of students to the system.",
        "requestBody": {
          "description": "Single student DTO or a list of student DTOs.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateStudentDto"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateStudentDto"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateStudentDto"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Student(s) added successfully."
          },
          "400": {
            "description": "If the input data is invalid."
          }
        }
      }
    },
    "/api/Student/{id}": {
      "get": {
        "tags": [
          "Student"
        ],
        "summary": "Retrieves a specific student by their unique ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of the student.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the student details successfully."
          },
          "404": {
            "description": "If no student is found with the given ID."
          }
        }
      },
      "put": {
        "tags": [
          "Student"
        ],
        "summary": "Updates an existing student's information.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of the student to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The updated student DTO data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStudentDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStudentDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStudentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Student updated successfully."
          },
          "400": {
            "description": "If the input data is invalid."
          },
          "404": {
            "description": "If no student is found with the given ID."
          }
        }
      },
      "delete": {
        "tags": [
          "Student"
        ],
        "summary": "Deletes a specific student from the system by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of the student to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Student deleted successfully."
          },
          "404": {
            "description": "If no student is found with the given ID."
          }
        }
      }
    },
    "/api/Student/import": {
      "post": {
        "tags": [
          "Student"
        ],
        "summary": "Imports multiple students in bulk.",
        "description": "Example of request body:\r\n\r\n[\r\n  { \"name\": \"أحمد علي\", \"classId\": 1, \"rollNumber\": \"A01\" },\r\n  { \"name\": \"سارة محمد\", \"classId\": 1, \"rollNumber\": \"A02\" }\r\n]",
        "requestBody": {
          "description": "List of student DTOs to import.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateStudentDto"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateStudentDto"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateStudentDto"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the number of students successfully imported."
          },
          "400": {
            "description": "If the input data is null, empty, or any student data is invalid."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AttendanceRecordDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "studentId": {
            "type": "integer",
            "format": "int32"
          },
          "classId": {
            "type": "integer",
            "format": "int32"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "isAbsent": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "BehaviorRecordDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "studentId": {
            "type": "integer",
            "format": "int32"
          },
          "behaviorType": {
            "$ref": "#/components/schemas/BehaviorType"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "BehaviorType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16
        ],
        "type": "integer",
        "format": "int32"
      },
      "CreateStudentDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "classId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "ReportDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "reportType": {
            "type": "string",
            "nullable": true
          },
          "generatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "reportData": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SchoolClassDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "academicTerm": {
            "type": "string",
            "nullable": true
          },
          "className": {
            "type": "string",
            "nullable": true
          },
          "studentCount": {
            "type": "integer",
            "format": "int32"
          },
          "director": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}